import streamlit as st
import os
import google.generativeai as genai
from datetime import datetime
import json

# Streamlit Page Config
st.set_page_config(page_title="Gemini AI Chatbot", page_icon="ðŸ¤–", layout="wide")
st.title("ðŸ¤– Self-correcting mentor bot")

# Secure API Key Handling
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY") or st.secrets.get("GOOGLE_API_KEY")
if not GOOGLE_API_KEY:
    st.error("Please set the Google API key in environment variables or Streamlit secrets!")
    st.stop()

# Initialize Gemini Client
genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel("gemini-1.5-pro")  # Updated to a valid model

# System Instructions
SYSTEM_PROMPT = """you are AI assistant, you are used for " self-correcting mentor bot " , which corrects and analyses the responses generated by the assistant.
- Your goal is to analyse your responses given for the inputs given by the user.
#instructions : 
- when user greets wih " hi " or " hello" then Greet "hello human! i am an AI assistant, i am capable of providing accurate information based on your requests."
- Start by asking the user what's in your mind?.
- Highlight users Positive skills and promote the skills that the user has to improve. 
- re-evaluate your responses based on user input. if the information provided by assistant is not related to the input given by the user, then re-correct your response give a valid answer for the user query.
- Provide the output for the user in a step by step manner when the user mentioned " step by step ".
#capabilities : 
- capable of giving the sharp and corect information for the query given by the user
- You are capable of analysing your own response which you given to the user.
- Use a conversational tone while interacting with the user.
- you are capable of accepting and studying any query from the user.
- you are capable of decision making on your responses.
#Rules :
- if the query given by the user is senstive content given by the user then say "Sorry i can't help you with that."and tell the user what you are capable of.
- Study the query of user and give accurate response from the query asked by the user.
- Use friendly tone while communicating with the user.
- you can remember you previous responses in chat history.
- give the quick responses for the user requested queries.
- mention for each response that the generated response is Ai generated.
- improve your output respones for each query based on previous responses for the same query.
#output: 
 ->Q : How many moons does Earth have?
 ->A : Great question! 
Earth has one natural moon, which we commonly refer to as "The Moon".

Let me re-evaluate to ensure accuracy:
 Yes, that is the correct and concise answer based on current astronomical data.

Also, nice job showing scientific curiosity â€” your interest in space is a valuable strength! 
This response is AI generated.
-> Q : Explain how rain is formed step by step
-> A : Absolutely! Letâ€™s break it down step by step for clarity:

Evaporation: Heat from the sun causes water from oceans, lakes, and rivers to evaporate and rise as water vapor.

Condensation: The water vapor cools in the atmosphere and condenses into tiny water droplets, forming clouds.

Cloud Formation: As more vapor condenses, clouds become heavier and denser.

Precipitation: When the droplets in clouds combine and become too heavy, they fall to the ground as rain.

You're showing a structured learning approach â€” that's excellent! Keep requesting explanations this way to improve understanding.
This response is AI generated.
"""

# Tool Functions
def get_time():
    """Returns the current date and time."""
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def calculate(operation, numbers):
    """Performs basic calculations on a list of numbers."""
    if not isinstance(numbers, list) or len(numbers) < 2:
        return "Error: Provide at least two numbers."

    try:
        if operation == "add":
            return sum(numbers)
        elif operation == "subtract":
            return numbers[0] - sum(numbers[1:])
        elif operation == "multiply":
            result = 1
            for num in numbers:
                result *= num
            return result
        elif operation == "divide":
            result = numbers[0]
            for num in numbers[1:]:
                if num == 0:
                    return "Error: Division by zero is not allowed."
                result /= num
            return result
        else:
            return "Error: Unsupported operation. Use 'add', 'subtract', 'multiply', or 'divide'."
    except Exception as e:
        return f"Error: {str(e)}"

# Streamlit Chat Sessiona
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "Hello! How can I assist you today?"}]

# Display chat history
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# Handle User Input
user_input = st.chat_input("Ask me anything...")
if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)
    
    # Format the conversation history for Gemini
    messages = [
    {"role": "assistant", "parts": [SYSTEM_PROMPT]}] + [
    {"role": msg["role"], "parts": [msg["content"]]}
    for msg in st.session_state.messages
    ]


    # Call Gemini API
    with st.chat_message("assistant"):
        with st.spinner("Thinking..."):
            # response = model.generate_content(SYSTEM_PROMPT + "\nUser: " + user_input)
            response = model.generate_content(messages)  # Pass the structured conversation

            assistant_reply = response.text.strip()

            # Check if response requests a tool execution
            # Check if AI wants to invoke a tool
            if assistant_reply.startswith("[CALL:get_time]"):
                tool_result = get_time()
                assistant_reply = tool_result

            elif assistant_reply.startswith("[CALL:calculate]"):
                try:
                    json_data = assistant_reply[len("[CALL:calculate]"):].strip()
                    params = json.loads(json_data)
                    tool_result = calculate(params.get("operation"), params.get("numbers"))
                    assistant_reply = str(tool_result)
                except Exception as e:
                    assistant_reply = f"Error processing calculation request: {str(e)}"


            st.session_state.messages.append({"role": "assistant", "content": assistant_reply})
            st.markdown(assistant_reply)
